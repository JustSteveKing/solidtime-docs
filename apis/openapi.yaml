openapi: 3.1.0
info:
  title: solidtime
  version: 0.0.1
servers:
  - url: https://app.solidtime.io/api
    description: Production
  - url: https://app.staging.solidtime.io/api
    description: Staging
  - url: https://solidtime.test/api
    description: Local
security:
  - oauth2: []
paths:
  /v1/users/me/api-tokens:
    get:
      operationId: getApiTokens
      description: This endpoint is independent of organization.
      summary: List all api token of the currently authenticated user
      tags:
        - ApiToken
      responses:
        "200":
          description: "`ApiTokenCollection`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ApiTokenCollection"
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
    post:
      operationId: createApiToken
      description: >-
        The response will contain the access token that can be used to send
        authenticated API requests.

        Please note that the access token is only shown in this response and
        cannot be retrieved later.
      summary: Create a new api token for the currently authenticated user
      tags:
        - ApiToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiTokenStoreRequest"
      responses:
        "200":
          description: "`ApiTokenWithAccessTokenResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ApiTokenWithAccessTokenResource"
                required:
                  - data
        "400":
          $ref: "#/components/responses/PersonalAccessClientIsNotConfiguredException"
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "422":
          $ref: "#/components/responses/ValidationException"
  /v1/users/me/api-tokens/{apiToken}/revoke:
    post:
      operationId: revokeApiToken
      summary: Revoke an api token
      tags:
        - ApiToken
      parameters:
        - name: apiToken
          in: path
          required: true
          description: The api token ID
          schema:
            type: string
      responses:
        "204":
          description: No content
        "400":
          $ref: "#/components/responses/PersonalAccessClientIsNotConfiguredException"
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/users/me/api-tokens/{apiToken}:
    delete:
      operationId: deleteApiToken
      summary: Delete an api token
      tags:
        - ApiToken
      parameters:
        - name: apiToken
          in: path
          required: true
          description: The api token ID
          schema:
            type: string
      responses:
        "204":
          description: No content
        "400":
          $ref: "#/components/responses/PersonalAccessClientIsNotConfiguredException"
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/charts/weekly-project-overview:
    get:
      operationId: weeklyProjectOverview
      tags:
        - Chart
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    value:
                      type: integer
                    name:
                      type: string
                    color:
                      type: string
                  required:
                    - value
                    - name
                    - color
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/charts/latest-tasks:
    get:
      operationId: latestTasks
      tags:
        - Chart
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    task_id:
                      type: string
                    name:
                      type: string
                    description:
                      type:
                        - string
                        - "null"
                    status:
                      type: boolean
                    time_entry_id:
                      type:
                        - string
                        - "null"
                  required:
                    - task_id
                    - name
                    - description
                    - status
                    - time_entry_id
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/charts/last-seven-days:
    get:
      operationId: lastSevenDays
      tags:
        - Chart
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                    duration:
                      type: integer
                    history:
                      type: array
                      items:
                        type: integer
                  required:
                    - date
                    - duration
                    - history
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/charts/latest-team-activity:
    get:
      operationId: latestTeamActivity
      tags:
        - Chart
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    member_id:
                      type: string
                    name:
                      type: string
                    description:
                      type:
                        - string
                        - "null"
                    time_entry_id:
                      type: string
                    task_id:
                      type:
                        - string
                        - "null"
                    status:
                      type: boolean
                  required:
                    - member_id
                    - name
                    - description
                    - time_entry_id
                    - task_id
                    - status
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/charts/daily-tracked-hours:
    get:
      operationId: dailyTrackedHours
      tags:
        - Chart
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                    duration:
                      type: integer
                  required:
                    - date
                    - duration
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/charts/total-weekly-time:
    get:
      operationId: totalWeeklyTime
      tags:
        - Chart
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/charts/total-weekly-billable-time:
    get:
      operationId: totalWeeklyBillableTime
      tags:
        - Chart
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/charts/total-weekly-billable-amount:
    get:
      operationId: totalWeeklyBillableAmount
      tags:
        - Chart
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: integer
                  currency:
                    type: string
                required:
                  - value
                  - currency
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/charts/weekly-history:
    get:
      operationId: weeklyHistory
      tags:
        - Chart
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                    duration:
                      type: integer
                  required:
                    - date
                    - duration
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/clients:
    get:
      operationId: getClients
      summary: Get clients
      tags:
        - Client
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 2147483647
        - name: archived
          in: query
          schema:
            type: string
            enum:
              - "true"
              - "false"
              - all
      responses:
        "200":
          description: "`ClientCollection`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ClientCollection"
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
    post:
      operationId: createClient
      summary: Create client
      tags:
        - Client
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientStoreRequest"
      responses:
        "200":
          description: "`ClientResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ClientResource"
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
  /v1/organizations/{organization}/clients/{client}:
    put:
      operationId: updateClient
      summary: Update client
      tags:
        - Client
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: client
          in: path
          required: true
          description: The client ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientUpdateRequest"
      responses:
        "200":
          description: "`ClientResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ClientResource"
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
    delete:
      operationId: deleteClient
      summary: Delete client
      tags:
        - Client
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: client
          in: path
          required: true
          description: The client ID
          schema:
            type: string
      responses:
        "204":
          description: No content
        "400":
          $ref: "#/components/responses/EntityStillInUseApiException"
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/currencies:
    get:
      operationId: getCurrencies
      summary: Get all currencies
      tags:
        - Currency
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                    name:
                      type: string
                    symbol:
                      type: string
                  required:
                    - code
                    - name
                    - symbol
  /v1/organizations/{organization}/export:
    post:
      operationId: exportOrganization
      summary: Export data of an organization
      tags:
        - Export
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  download_url:
                    type: string
                required:
                  - success
                  - download_url
        "400":
          $ref: "#/components/responses/ExportException"
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/importers:
    get:
      operationId: getImporters
      summary: Get information about available importers
      tags:
        - Import
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        name:
                          type: string
                        description:
                          type: string
                      required:
                        - key
                        - name
                        - description
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/import:
    post:
      operationId: importData
      summary: Import data into the organization
      tags:
        - Import
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportRequest"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  report:
                    type: object
                    description: Import report
                    properties:
                      clients:
                        type: object
                        properties:
                          created:
                            type: integer
                        required:
                          - created
                      projects:
                        type: object
                        properties:
                          created:
                            type: integer
                        required:
                          - created
                      tasks:
                        type: object
                        properties:
                          created:
                            type: integer
                        required:
                          - created
                      time_entries:
                        type: object
                        properties:
                          created:
                            type: integer
                        required:
                          - created
                      tags:
                        type: object
                        properties:
                          created:
                            type: integer
                        required:
                          - created
                      users:
                        type: object
                        properties:
                          created:
                            type: integer
                        required:
                          - created
                    required:
                      - clients
                      - projects
                      - tasks
                      - time_entries
                      - tags
                      - users
                required:
                  - report
        "400":
          description: ""
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Invalid base64 encoded data
                    required:
                      - message
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
  /v1/organizations/{organization}/invitations:
    get:
      operationId: getInvitations
      summary: List all invitations of an organization
      tags:
        - Invitation
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      responses:
        "200":
          description: Paginated set of `InvitationResource`
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/InvitationResource"
                  links:
                    type: object
                    properties:
                      first:
                        type:
                          - string
                          - "null"
                      last:
                        type:
                          - string
                          - "null"
                      prev:
                        type:
                          - string
                          - "null"
                      next:
                        type:
                          - string
                          - "null"
                    required:
                      - first
                      - last
                      - prev
                      - next
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      from:
                        type:
                          - integer
                          - "null"
                      last_page:
                        type: integer
                      links:
                        type: array
                        description: Generated paginator links.
                        items:
                          type: object
                          properties:
                            url:
                              type:
                                - string
                                - "null"
                            label:
                              type: string
                            active:
                              type: boolean
                          required:
                            - url
                            - label
                            - active
                      path:
                        type:
                          - string
                          - "null"
                        description: Base path for paginator generated URLs.
                      per_page:
                        type: integer
                        description: Number of items shown per page.
                      to:
                        type:
                          - integer
                          - "null"
                        description: Number of the last item in the slice.
                      total:
                        type: integer
                        description: Total number of items being paginated.
                    required:
                      - current_page
                      - from
                      - last_page
                      - links
                      - path
                      - per_page
                      - to
                      - total
                required:
                  - data
                  - links
                  - meta
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
    post:
      operationId: invite
      summary: Invite a user to the organization
      tags:
        - Invitation
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvitationStoreRequest"
      responses:
        "204":
          description: No content
        "400":
          $ref: "#/components/responses/UserIsAlreadyMemberOfOrganizationApiException"
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
  /v1/organizations/{organization}/invitations/{invitation}/resend:
    post:
      operationId: resendInvitationEmail
      summary: Resend email for a pending invitation
      tags:
        - Invitation
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: invitation
          in: path
          required: true
          description: The invitation ID
          schema:
            type: string
      responses:
        "204":
          description: No content
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/invitations/{invitation}:
    delete:
      operationId: removeInvitation
      summary: Remove a pending invitation
      tags:
        - Invitation
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: invitation
          in: path
          required: true
          description: The invitation ID
          schema:
            type: string
      responses:
        "204":
          description: No content
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/members:
    get:
      operationId: getMembers
      summary: List all members of an organization
      tags:
        - Member
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      responses:
        "200":
          description: Paginated set of `MemberResource`
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/MemberResource"
                  links:
                    type: object
                    properties:
                      first:
                        type:
                          - string
                          - "null"
                      last:
                        type:
                          - string
                          - "null"
                      prev:
                        type:
                          - string
                          - "null"
                      next:
                        type:
                          - string
                          - "null"
                    required:
                      - first
                      - last
                      - prev
                      - next
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      from:
                        type:
                          - integer
                          - "null"
                      last_page:
                        type: integer
                      links:
                        type: array
                        description: Generated paginator links.
                        items:
                          type: object
                          properties:
                            url:
                              type:
                                - string
                                - "null"
                            label:
                              type: string
                            active:
                              type: boolean
                          required:
                            - url
                            - label
                            - active
                      path:
                        type:
                          - string
                          - "null"
                        description: Base path for paginator generated URLs.
                      per_page:
                        type: integer
                        description: Number of items shown per page.
                      to:
                        type:
                          - integer
                          - "null"
                        description: Number of the last item in the slice.
                      total:
                        type: integer
                        description: Total number of items being paginated.
                    required:
                      - current_page
                      - from
                      - last_page
                      - links
                      - path
                      - per_page
                      - to
                      - total
                required:
                  - data
                  - links
                  - meta
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
  /v1/organizations/{organization}/members/{member}:
    put:
      operationId: updateMember
      summary: Update a member of the organization
      tags:
        - Member
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: member
          in: path
          required: true
          description: The member ID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MemberUpdateRequest"
      responses:
        "200":
          description: "`MemberResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/MemberResource"
                required:
                  - data
        "400":
          $ref: "#/components/responses/ChangingRoleOfPlaceholderIsNotAllowed"
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
    delete:
      operationId: removeMember
      summary: Remove a member of the organization
      tags:
        - Member
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: member
          in: path
          required: true
          description: The member ID
          schema:
            type: string
      responses:
        "204":
          description: No content
        "400":
          $ref: "#/components/responses/CanNotRemoveOwnerFromOrganization"
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/members/{member}/invite-placeholder:
    post:
      operationId: invitePlaceholder
      summary: Invite a placeholder member to become a real member of the organization
      tags:
        - Member
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: member
          in: path
          required: true
          description: The member ID
          schema:
            type: string
      responses:
        "204":
          description: No content
        "400":
          $ref: "#/components/responses/UserIsAlreadyMemberOfOrganizationApiException"
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/members/{member}/make-placeholder:
    post:
      operationId: makePlaceholder
      summary: Make a member a placeholder member
      tags:
        - Member
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: member
          in: path
          required: true
          description: The member ID
          schema:
            type: string
      responses:
        "204":
          description: No content
        "400":
          $ref: "#/components/responses/ChangingRoleOfPlaceholderIsNotAllowed"
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/member/{member}/merge-into:
    post:
      operationId: mergeMember
      summary: Merge one member into another
      tags:
        - Member
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: member
          in: path
          required: true
          description: The member ID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MemberMergeIntoRequest"
      responses:
        "204":
          description: No content
        "400":
          $ref: "#/components/responses/OnlyPlaceholdersCanBeMergedIntoAnotherMember"
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
  /v1/organizations/{organization}:
    get:
      operationId: getOrganization
      summary: Get organization
      tags:
        - Organization
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      responses:
        "200":
          description: "`OrganizationResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/OrganizationResource"
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
    put:
      operationId: updateOrganization
      summary: Update organization
      tags:
        - Organization
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationUpdateRequest"
      responses:
        "200":
          description: "`OrganizationResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/OrganizationResource"
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
  /v1/organizations/{organization}/projects:
    get:
      operationId: getProjects
      summary: Get projects visible to the current user
      tags:
        - Project
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 2147483647
        - name: archived
          in: query
          schema:
            type: string
            enum:
              - "true"
              - "false"
              - all
      responses:
        "200":
          description: Paginated set of `ProjectResource`
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProjectResource"
                  links:
                    type: object
                    properties:
                      first:
                        type:
                          - string
                          - "null"
                      last:
                        type:
                          - string
                          - "null"
                      prev:
                        type:
                          - string
                          - "null"
                      next:
                        type:
                          - string
                          - "null"
                    required:
                      - first
                      - last
                      - prev
                      - next
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      from:
                        type:
                          - integer
                          - "null"
                      last_page:
                        type: integer
                      links:
                        type: array
                        description: Generated paginator links.
                        items:
                          type: object
                          properties:
                            url:
                              type:
                                - string
                                - "null"
                            label:
                              type: string
                            active:
                              type: boolean
                          required:
                            - url
                            - label
                            - active
                      path:
                        type:
                          - string
                          - "null"
                        description: Base path for paginator generated URLs.
                      per_page:
                        type: integer
                        description: Number of items shown per page.
                      to:
                        type:
                          - integer
                          - "null"
                        description: Number of the last item in the slice.
                      total:
                        type: integer
                        description: Total number of items being paginated.
                    required:
                      - current_page
                      - from
                      - last_page
                      - links
                      - path
                      - per_page
                      - to
                      - total
                required:
                  - data
                  - links
                  - meta
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
    post:
      operationId: createProject
      summary: Create project
      tags:
        - Project
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectStoreRequest"
      responses:
        "200":
          description: "`ProjectResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ProjectResource"
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
  /v1/organizations/{organization}/projects/{project}:
    get:
      operationId: getProject
      summary: Get project
      tags:
        - Project
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: project
          in: path
          required: true
          description: The project ID
          schema:
            type: string
      responses:
        "200":
          description: "`ProjectResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ProjectResource"
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
    put:
      operationId: updateProject
      summary: Update project
      tags:
        - Project
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: project
          in: path
          required: true
          description: The project ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectUpdateRequest"
      responses:
        "200":
          description: "`ProjectResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ProjectResource"
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
    delete:
      operationId: deleteProject
      summary: Delete project
      tags:
        - Project
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: project
          in: path
          required: true
          description: The project ID
          schema:
            type: string
      responses:
        "204":
          description: No content
        "400":
          $ref: "#/components/responses/EntityStillInUseApiException"
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/projects/{project}/project-members:
    get:
      operationId: getProjectMembers
      summary: Get project members for project
      tags:
        - ProjectMember
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: project
          in: path
          required: true
          description: The project ID
          schema:
            type: string
      responses:
        "200":
          description: Paginated set of `ProjectMemberResource`
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProjectMemberResource"
                  links:
                    type: object
                    properties:
                      first:
                        type:
                          - string
                          - "null"
                      last:
                        type:
                          - string
                          - "null"
                      prev:
                        type:
                          - string
                          - "null"
                      next:
                        type:
                          - string
                          - "null"
                    required:
                      - first
                      - last
                      - prev
                      - next
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      from:
                        type:
                          - integer
                          - "null"
                      last_page:
                        type: integer
                      links:
                        type: array
                        description: Generated paginator links.
                        items:
                          type: object
                          properties:
                            url:
                              type:
                                - string
                                - "null"
                            label:
                              type: string
                            active:
                              type: boolean
                          required:
                            - url
                            - label
                            - active
                      path:
                        type:
                          - string
                          - "null"
                        description: Base path for paginator generated URLs.
                      per_page:
                        type: integer
                        description: Number of items shown per page.
                      to:
                        type:
                          - integer
                          - "null"
                        description: Number of the last item in the slice.
                      total:
                        type: integer
                        description: Total number of items being paginated.
                    required:
                      - current_page
                      - from
                      - last_page
                      - links
                      - path
                      - per_page
                      - to
                      - total
                required:
                  - data
                  - links
                  - meta
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
    post:
      operationId: createProjectMember
      summary: Add project member to project
      tags:
        - ProjectMember
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: project
          in: path
          required: true
          description: The project ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectMemberStoreRequest"
      responses:
        "200":
          description: "`ProjectMemberResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ProjectMemberResource"
                required:
                  - data
        "400":
          $ref: "#/components/responses/UserIsAlreadyMemberOfProjectApiException"
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
  /v1/organizations/{organization}/project-members/{projectMember}:
    put:
      operationId: updateProjectMember
      summary: Update project member
      tags:
        - ProjectMember
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: projectMember
          in: path
          required: true
          description: The project member ID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectMemberUpdateRequest"
      responses:
        "200":
          description: "`ProjectMemberResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ProjectMemberResource"
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
    delete:
      operationId: deleteProjectMember
      summary: Delete project member
      tags:
        - ProjectMember
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: projectMember
          in: path
          required: true
          description: The project member ID
          schema:
            type: string
      responses:
        "204":
          description: No content
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/reports:
    get:
      operationId: getReports
      summary: Get reports
      tags:
        - Report
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      responses:
        "200":
          description: Paginated set of `ReportResource`
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ReportResource"
                  links:
                    type: object
                    properties:
                      first:
                        type:
                          - string
                          - "null"
                      last:
                        type:
                          - string
                          - "null"
                      prev:
                        type:
                          - string
                          - "null"
                      next:
                        type:
                          - string
                          - "null"
                    required:
                      - first
                      - last
                      - prev
                      - next
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      from:
                        type:
                          - integer
                          - "null"
                      last_page:
                        type: integer
                      links:
                        type: array
                        description: Generated paginator links.
                        items:
                          type: object
                          properties:
                            url:
                              type:
                                - string
                                - "null"
                            label:
                              type: string
                            active:
                              type: boolean
                          required:
                            - url
                            - label
                            - active
                      path:
                        type:
                          - string
                          - "null"
                        description: Base path for paginator generated URLs.
                      per_page:
                        type: integer
                        description: Number of items shown per page.
                      to:
                        type:
                          - integer
                          - "null"
                        description: Number of the last item in the slice.
                      total:
                        type: integer
                        description: Total number of items being paginated.
                    required:
                      - current_page
                      - from
                      - last_page
                      - links
                      - path
                      - per_page
                      - to
                      - total
                required:
                  - data
                  - links
                  - meta
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
    post:
      operationId: createReport
      summary: Create report
      tags:
        - Report
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportStoreRequest"
      responses:
        "200":
          description: "`DetailedReportResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/DetailedReportResource"
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
  /v1/organizations/{organization}/reports/{report}:
    get:
      operationId: getReport
      summary: Get report
      tags:
        - Report
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: report
          in: path
          required: true
          description: The report ID
          schema:
            type: string
      responses:
        "200":
          description: "`DetailedReportResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/DetailedReportResource"
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
    put:
      operationId: updateReport
      summary: Update report
      tags:
        - Report
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: report
          in: path
          required: true
          description: The report ID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportUpdateRequest"
      responses:
        "200":
          description: "`DetailedReportResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/DetailedReportResource"
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
    delete:
      operationId: deleteReport
      summary: Delete report
      tags:
        - Report
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: report
          in: path
          required: true
          description: The report ID
          schema:
            type: string
      responses:
        "204":
          description: No content
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/public/reports:
    get:
      operationId: getPublicReport
      description: >-
        This endpoint is public and does not require authentication. The report
        must be public and not expired.

        The report is considered expired if the `public_until` field is set and
        the date is in the past.

        The report is considered public if the `is_public` field is set to
        `true`.
      summary: Get report by a share secret
      tags:
        - Report
      responses:
        "200":
          description: "`DetailedWithDataReportResource`"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedWithDataReportResource"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/tags:
    get:
      operationId: getTags
      summary: Get tags
      tags:
        - Tag
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      responses:
        "200":
          description: "`TagCollection`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/TagCollection"
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
    post:
      operationId: createTag
      summary: Create tag
      tags:
        - Tag
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagStoreRequest"
      responses:
        "200":
          description: "`TagResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/TagResource"
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
  /v1/organizations/{organization}/tags/{tag}:
    put:
      operationId: updateTag
      summary: Update tag
      tags:
        - Tag
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: tag
          in: path
          required: true
          description: The tag ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagUpdateRequest"
      responses:
        "200":
          description: "`TagResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/TagResource"
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
    delete:
      operationId: deleteTag
      summary: Delete tag
      tags:
        - Tag
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: tag
          in: path
          required: true
          description: The tag ID
          schema:
            type: string
      responses:
        "204":
          description: No content
        "400":
          $ref: "#/components/responses/EntityStillInUseApiException"
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/tasks:
    get:
      operationId: getTasks
      summary: Get tasks
      tags:
        - Task
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: project_id
          in: query
          schema:
            type: string
        - name: done
          in: query
          schema:
            type: string
            enum:
              - "true"
              - "false"
              - all
      responses:
        "200":
          description: Paginated set of `TaskResource`
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/TaskResource"
                  links:
                    type: object
                    properties:
                      first:
                        type:
                          - string
                          - "null"
                      last:
                        type:
                          - string
                          - "null"
                      prev:
                        type:
                          - string
                          - "null"
                      next:
                        type:
                          - string
                          - "null"
                    required:
                      - first
                      - last
                      - prev
                      - next
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      from:
                        type:
                          - integer
                          - "null"
                      last_page:
                        type: integer
                      links:
                        type: array
                        description: Generated paginator links.
                        items:
                          type: object
                          properties:
                            url:
                              type:
                                - string
                                - "null"
                            label:
                              type: string
                            active:
                              type: boolean
                          required:
                            - url
                            - label
                            - active
                      path:
                        type:
                          - string
                          - "null"
                        description: Base path for paginator generated URLs.
                      per_page:
                        type: integer
                        description: Number of items shown per page.
                      to:
                        type:
                          - integer
                          - "null"
                        description: Number of the last item in the slice.
                      total:
                        type: integer
                        description: Total number of items being paginated.
                    required:
                      - current_page
                      - from
                      - last_page
                      - links
                      - path
                      - per_page
                      - to
                      - total
                required:
                  - data
                  - links
                  - meta
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
    post:
      operationId: createTask
      summary: Create task
      tags:
        - Task
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskStoreRequest"
      responses:
        "200":
          description: "`TaskResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/TaskResource"
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
  /v1/organizations/{organization}/tasks/{task}:
    put:
      operationId: updateTask
      summary: Update task
      tags:
        - Task
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: task
          in: path
          required: true
          description: The task ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskUpdateRequest"
      responses:
        "200":
          description: "`TaskResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/TaskResource"
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
    delete:
      operationId: deleteTask
      summary: Delete task
      tags:
        - Task
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: task
          in: path
          required: true
          description: The task ID
          schema:
            type: string
      responses:
        "204":
          description: No content
        "400":
          $ref: "#/components/responses/EntityStillInUseApiException"
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/organizations/{organization}/time-entries:
    get:
      operationId: getTimeEntries
      description: >-
        If you only need time entries for a specific user, you can filter by
        `user_id`.

        Users with the permission `time-entries:view:own` can only use this
        endpoint with their own user ID in the user_id filter.
      summary: Get time entries in organization
      tags:
        - TimeEntry
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: member_id
          in: query
          description: Filter by member ID
          schema:
            type: string
        - name: start
          in: query
          description: "Filter only time entries that have a start date after the given
            timestamp in UTC (example: 2021-01-01T00:00:00Z)"
          schema:
            type:
              - string
              - "null"
            format: date
        - name: end
          in: query
          description: "Filter only time entries that have a start date before the given
            timestamp in UTC (example: 2021-01-01T00:00:00Z)"
          schema:
            type:
              - string
              - "null"
            format: date
        - name: active
          in: query
          description: Filter by active status (active means has no end date, is still
            running)
          schema:
            type: string
            enum:
              - "true"
              - "false"
        - name: billable
          in: query
          description: Filter by billable status
          schema:
            type: string
            enum:
              - "true"
              - "false"
        - name: limit
          in: query
          description: "Limit the number of returned time entries (default: 150)"
          schema:
            type: integer
            minimum: 1
            maximum: 500
        - name: offset
          in: query
          description: "Skip the first n time entries (default: 0)"
          schema:
            type: integer
            minimum: 0
            maximum: 2147483647
        - name: only_full_dates
          in: query
          description: Filter makes sure that only time entries of a whole date are returned
          schema:
            type: string
            enum:
              - "true"
              - "false"
        - name: user_id
          in: query
          schema:
            type: string
        - name: member_ids
          in: query
          description: Filter by multiple member IDs, member IDs are OR combined, but AND
            combined with the member_id parameter
          schema:
            type: array
            items:
              type: string
            minItems: 1
        - name: client_ids
          in: query
          description: Filter by client IDs, client IDs are OR combined
          schema:
            type: array
            items:
              type: string
            minItems: 1
        - name: project_ids
          in: query
          description: Filter by project IDs, project IDs are OR combined
          schema:
            type: array
            items:
              type: string
            minItems: 1
        - name: tag_ids
          in: query
          description: Filter by tag IDs, tag IDs are OR combined
          schema:
            type: array
            items:
              type: string
            minItems: 1
        - name: task_ids
          in: query
          description: Filter by task IDs, task IDs are OR combined
          schema:
            type: array
            items:
              type: string
            minItems: 1
      responses:
        "200":
          description: Paginated set of `TimeEntryResource`
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/TimeEntryResource"
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                        description: Total number of items being paginated.
                    required:
                      - total
                required:
                  - data
                  - meta
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
    post:
      operationId: createTimeEntry
      summary: Create time entry
      tags:
        - TimeEntry
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimeEntryStoreRequest"
      responses:
        "200":
          description: "`TimeEntryResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/TimeEntryResource"
                required:
                  - data
        "400":
          $ref: "#/components/responses/TimeEntryStillRunningApiException"
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
    patch:
      operationId: updateMultipleTimeEntries
      summary: Update multiple time entries
      tags:
        - TimeEntry
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimeEntryUpdateMultipleRequest"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  error:
                    type: string
                required:
                  - success
                  - error
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
    delete:
      operationId: deleteTimeEntries
      summary: Delete multiple time entries
      tags:
        - TimeEntry
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: ids
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
              format: uuid
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  error:
                    type: string
                required:
                  - success
                  - error
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
  /v1/organizations/{organization}/time-entries/export:
    get:
      operationId: exportTimeEntries
      summary: Export time entries in organization
      tags:
        - TimeEntry
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: format
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/ExportFormat"
        - name: member_id
          in: query
          description: Filter by member ID
          schema:
            type: string
            format: uuid
        - name: start
          in: query
          required: true
          description: "Filter only time entries that have a start date after the given
            timestamp in UTC (example: 2021-01-01T00:00:00Z)"
          schema:
            type: string
            format: date
        - name: end
          in: query
          required: true
          description: "Filter only time entries that have a start date before the given
            timestamp in UTC (example: 2021-01-01T00:00:00Z)"
          schema:
            type: string
            format: date
        - name: active
          in: query
          description: Filter by active status (active means has no end date, is still
            running)
          schema:
            type: string
            enum:
              - "true"
              - "false"
        - name: billable
          in: query
          description: Filter by billable status
          schema:
            type: string
            enum:
              - "true"
              - "false"
        - name: limit
          in: query
          description: "Limit the number of returned time entries (default: 150)"
          schema:
            type: integer
            minimum: 1
            maximum: 500
        - name: only_full_dates
          in: query
          description: Filter makes sure that only time entries of a whole date are returned
          schema:
            type: string
            enum:
              - "true"
              - "false"
        - name: debug
          in: query
          schema:
            type: string
            enum:
              - "true"
              - "false"
        - name: member_ids
          in: query
          description: Filter by multiple member IDs, member IDs are OR combined, but AND
            combined with the member_id parameter
          schema:
            type: array
            items:
              type: string
              format: uuid
            minItems: 1
        - name: project_ids
          in: query
          description: Filter by project IDs, project IDs are OR combined
          schema:
            type: array
            items:
              type: string
              format: uuid
            minItems: 1
        - name: tag_ids
          in: query
          description: Filter by tag IDs, tag IDs are OR combined
          schema:
            type: array
            items:
              type: string
              format: uuid
            minItems: 1
        - name: task_ids
          in: query
          description: Filter by task IDs, task IDs are OR combined
          schema:
            type: array
            items:
              type: string
              format: uuid
            minItems: 1
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    properties:
                      download_url:
                        type: string
                    required:
                      - download_url
                  - type: object
                    properties:
                      html:
                        type: string
                      footer_html:
                        type: string
                    required:
                      - html
                      - footer_html
        "400":
          $ref: "#/components/responses/PdfRendererIsNotConfiguredException"
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
  /v1/organizations/{organization}/time-entries/aggregate:
    get:
      operationId: getAggregatedTimeEntries
      description: >-
        This endpoint allows you to filter time entries and aggregate them by
        different criteria.

        The parameters `group` and `sub_group` allow you to group the time
        entries by different criteria.

        If the group parameters are all set to `null` or are all missing, the
        endpoint will aggregate all filtered time entries.
      summary: Get aggregated time entries in organization
      tags:
        - TimeEntry
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: group
          in: query
          description: Type of first grouping
          schema:
            $ref: "#/components/schemas/TimeEntryAggregationType"
        - name: sub_group
          in: query
          description: Type of second grouping
          schema:
            $ref: "#/components/schemas/TimeEntryAggregationType"
        - name: member_id
          in: query
          description: Filter by member ID
          schema:
            type: string
        - name: user_id
          in: query
          description: Filter by user ID
          schema:
            type: string
        - name: start
          in: query
          description: "Filter only time entries that have a start date after the given
            timestamp in UTC (example: 2021-01-01T00:00:00Z)"
          schema:
            type:
              - string
              - "null"
            format: date
        - name: end
          in: query
          description: "Filter only time entries that have a start date before the given
            timestamp in UTC (example: 2021-01-01T00:00:00Z)"
          schema:
            type:
              - string
              - "null"
            format: date
        - name: active
          in: query
          description: Filter by active status (active means has no end date, is still
            running)
          schema:
            type: string
            enum:
              - "true"
              - "false"
        - name: billable
          in: query
          description: Filter by billable status
          schema:
            type: string
            enum:
              - "true"
              - "false"
        - name: fill_gaps_in_time_groups
          in: query
          schema:
            type: string
            enum:
              - "true"
              - "false"
        - name: member_ids
          in: query
          description: Filter by multiple member IDs, member IDs are OR combined, but AND
            combined with the member_id parameter
          schema:
            type: array
            items:
              type: string
            minItems: 1
        - name: project_ids
          in: query
          description: Filter by project IDs, project IDs are OR combined
          schema:
            type: array
            items:
              type: string
            minItems: 1
        - name: client_ids
          in: query
          description: Filter by client IDs, client IDs are OR combined
          schema:
            type: array
            items:
              type: string
            minItems: 1
        - name: tag_ids
          in: query
          description: Filter by tag IDs, tag IDs are OR combined
          schema:
            type: array
            items:
              type: string
            minItems: 1
        - name: task_ids
          in: query
          description: Filter by task IDs, task IDs are OR combined
          schema:
            type: array
            items:
              type: string
            minItems: 1
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      grouped_type:
                        type:
                          - string
                          - "null"
                      grouped_data:
                        type:
                          - array
                          - "null"
                        items:
                          type: object
                          properties:
                            key:
                              type:
                                - string
                                - "null"
                            seconds:
                              type: integer
                            cost:
                              type:
                                - integer
                                - "null"
                            grouped_type:
                              type:
                                - string
                                - "null"
                            grouped_data:
                              type:
                                - array
                                - "null"
                              items:
                                type: object
                                properties:
                                  key:
                                    type:
                                      - string
                                      - "null"
                                  seconds:
                                    type: integer
                                  cost:
                                    type:
                                      - integer
                                      - "null"
                                  grouped_type:
                                    type: "null"
                                  grouped_data:
                                    type: "null"
                                required:
                                  - key
                                  - seconds
                                  - cost
                                  - grouped_type
                                  - grouped_data
                          required:
                            - key
                            - seconds
                            - cost
                            - grouped_type
                            - grouped_data
                      seconds:
                        type: integer
                      cost:
                        type:
                          - integer
                          - "null"
                    required:
                      - grouped_type
                      - grouped_data
                      - seconds
                      - cost
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
  /v1/organizations/{organization}/time-entries/aggregate/export:
    get:
      operationId: exportAggregatedTimeEntries
      summary: Export aggregated time entries in organization
      tags:
        - TimeEntry
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: format
          in: query
          required: true
          description: Data format of the export
          schema:
            $ref: "#/components/schemas/ExportFormat"
        - name: group
          in: query
          required: true
          description: Type of first grouping
          schema:
            $ref: "#/components/schemas/TimeEntryAggregationType"
        - name: sub_group
          in: query
          required: true
          description: Type of second grouping
          schema:
            $ref: "#/components/schemas/TimeEntryAggregationType"
        - name: history_group
          in: query
          required: true
          description: Type of grouping of the historic aggregation (time chart)
          schema:
            $ref: "#/components/schemas/TimeEntryAggregationTypeInterval"
        - name: member_id
          in: query
          description: Filter by member ID
          schema:
            type: string
        - name: user_id
          in: query
          description: Filter by user ID
          schema:
            type: string
        - name: start
          in: query
          required: true
          description: "Filter only time entries that have a start date after the given
            timestamp in UTC (example: 2021-01-01T00:00:00Z)"
          schema:
            type: string
            format: date
        - name: end
          in: query
          required: true
          description: "Filter only time entries that have a start date before the given
            timestamp in UTC (example: 2021-01-01T00:00:00Z)"
          schema:
            type: string
            format: date
        - name: active
          in: query
          description: Filter by active status (active means has no end date, is still
            running)
          schema:
            type: string
            enum:
              - "true"
              - "false"
        - name: billable
          in: query
          description: Filter by billable status
          schema:
            type: string
            enum:
              - "true"
              - "false"
        - name: fill_gaps_in_time_groups
          in: query
          schema:
            type: string
            enum:
              - "true"
              - "false"
        - name: debug
          in: query
          schema:
            type: string
            enum:
              - "true"
              - "false"
        - name: member_ids
          in: query
          description: Filter by multiple member IDs, member IDs are OR combined, but AND
            combined with the member_id parameter
          schema:
            type: array
            items:
              type: string
            minItems: 1
        - name: project_ids
          in: query
          description: Filter by project IDs, project IDs are OR combined
          schema:
            type: array
            items:
              type: string
            minItems: 1
        - name: client_ids
          in: query
          description: Filter by client IDs, client IDs are OR combined
          schema:
            type: array
            items:
              type: string
            minItems: 1
        - name: tag_ids
          in: query
          description: Filter by tag IDs, tag IDs are OR combined
          schema:
            type: array
            items:
              type: string
            minItems: 1
        - name: task_ids
          in: query
          description: Filter by task IDs, task IDs are OR combined
          schema:
            type: array
            items:
              type: string
            minItems: 1
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    properties:
                      download_url:
                        type: string
                    required:
                      - download_url
                  - type: object
                    properties:
                      html:
                        type: string
                      footer_html:
                        type: string
                    required:
                      - html
                      - footer_html
        "400":
          $ref: "#/components/responses/PdfRendererIsNotConfiguredException"
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
  /v1/organizations/{organization}/time-entries/{timeEntry}:
    put:
      operationId: updateTimeEntry
      summary: Update time entry
      tags:
        - TimeEntry
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: timeEntry
          in: path
          required: true
          description: The time entry ID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimeEntryUpdateRequest"
      responses:
        "200":
          description: "`TimeEntryResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/TimeEntryResource"
                required:
                  - data
        "400":
          $ref: "#/components/responses/TimeEntryCanNotBeRestartedApiException"
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
        "422":
          $ref: "#/components/responses/ValidationException"
    delete:
      operationId: deleteTimeEntry
      summary: Delete time entry
      tags:
        - TimeEntry
      parameters:
        - name: organization
          in: path
          required: true
          description: The organization ID
          schema:
            type: string
        - name: timeEntry
          in: path
          required: true
          description: The time entry ID
          schema:
            type: string
      responses:
        "204":
          description: No content
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
  /v1/users/me:
    get:
      operationId: getMe
      description: This endpoint is independent of organization.
      summary: Get the current user
      tags:
        - User
      responses:
        "200":
          description: "`UserResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/UserResource"
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
  /v1/users/me/memberships:
    get:
      operationId: getMyMemberships
      description: This endpoint is independent of organization.
      summary: Get the memberships of the current user
      tags:
        - UserMembership
      responses:
        "200":
          description: "`PersonalMembershipCollection`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/PersonalMembershipResource"
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
  /v1/users/me/time-entries/active:
    get:
      operationId: getMyActiveTimeEntry
      description: This endpoint is independent of organization.
      summary: Get the active time entry of the current user
      tags:
        - UserTimeEntry
      responses:
        "200":
          description: "`TimeEntryResource`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/TimeEntryResource"
                required:
                  - data
        "401":
          $ref: "#/components/responses/AuthenticationException"
        "403":
          $ref: "#/components/responses/AuthorizationException"
        "404":
          $ref: "#/components/responses/ModelNotFoundException"
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://solidtime.test/oauth/authorize
          scopes: {}
  schemas:
    ApiTokenCollection:
      type: array
      items:
        $ref: "#/components/schemas/ApiTokenResource"
      title: ApiTokenCollection
    ApiTokenResource:
      type: object
      properties:
        id:
          type: string
          description: ID of the API token, this ID is NOT a UUID
        name:
          type: string
          description: Name of the API token
        revoked:
          type: boolean
          description: Whether the API token is revoked
        scopes:
          type: array
          description: List of scopes that the API token has
          items:
            type: string
        created_at:
          type: string
          description: "When the API token was created (ISO 8601 format, UTC timezone,
            example: 2024-02-26T17:17:17Z)"
        expires_at:
          type:
            - string
            - "null"
          description: "At what time the API token expires (ISO 8601 format, UTC timezone,
            example: 2024-02-26T17:17:17Z)"
      required:
        - id
        - name
        - revoked
        - scopes
        - created_at
        - expires_at
      title: ApiTokenResource
    ApiTokenStoreRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
      required:
        - name
      title: ApiTokenStoreRequest
    ApiTokenWithAccessTokenResource:
      type: object
      properties:
        id:
          type: string
          description: ID of the API token, this ID is NOT a UUID
        name:
          type: string
          description: Name of the API token
        revoked:
          type: boolean
          description: Whether the API token is revoked
        scopes:
          type: array
          description: List of scopes that the API token has
          items:
            type: string
        created_at:
          type: string
          description: "When the API token was created (ISO 8601 format, UTC timezone,
            example: 2024-02-26T17:17:17Z)"
        expires_at:
          type:
            - string
            - "null"
          description: "At what time the API token expires (ISO 8601 format, UTC timezone,
            example: 2024-02-26T17:17:17Z)"
        access_token:
          type: string
          description: Access token that can be used to authenticate requests
      required:
        - id
        - name
        - revoked
        - scopes
        - created_at
        - expires_at
        - access_token
      title: ApiTokenWithAccessTokenResource
    ClientCollection:
      type: array
      items:
        $ref: "#/components/schemas/ClientResource"
      title: ClientCollection
    ClientResource:
      type: object
      properties:
        id:
          type: string
          description: ID
        name:
          type: string
          description: Name
        is_archived:
          type: boolean
          description: Whether the client is archived
        created_at:
          type: string
          description: When the tag was created
        updated_at:
          type: string
          description: When the tag was last updated
      required:
        - id
        - name
        - is_archived
        - created_at
        - updated_at
      title: ClientResource
    ClientStoreRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
      required:
        - name
      title: ClientStoreRequest
    ClientUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the client
          minLength: 1
          maxLength: 255
        is_archived:
          type: boolean
      required:
        - name
      title: ClientUpdateRequest
    CurrencyFormat:
      type: string
      enum:
        - iso-code-before-with-space
        - iso-code-after-with-space
        - symbol-before
        - symbol-after
        - symbol-before-with-space
        - symbol-after-with-space
      title: CurrencyFormat
    DateFormat:
      type: string
      enum:
        - point-separated-d-m-yyyy
        - slash-separated-mm-dd-yyyy
        - slash-separated-dd-mm-yyyy
        - hyphen-separated-dd-mm-yyyy
        - hyphen-separated-mm-dd-yyyy
        - hyphen-separated-yyyy-mm-dd
      title: DateFormat
    DetailedReportResource:
      type: object
      properties:
        id:
          type: string
          description: ID of the report
        name:
          type: string
          description: Name
        description:
          type:
            - string
            - "null"
          description: Description
        is_public:
          type: boolean
          description: Whether the report can be accessed via an external link
        public_until:
          type:
            - string
            - "null"
          description: Date until the report is public
        shareable_link:
          type:
            - string
            - "null"
          description: Get link to access the report externally, not set if the report is
            private
        properties:
          type: object
          properties:
            group:
              type: string
              description: Type of first grouping
            sub_group:
              type: string
              description: Type of second grouping
            history_group:
              type: string
              description: Type of grouping of the historic aggregation (time chart)
            start:
              type: string
              description: Start date of the report
            end:
              type: string
              description: End date of the report
            active:
              type:
                - boolean
                - "null"
              description: Whether the report is active
            member_ids:
              type:
                - array
                - "null"
              description: Filter by multiple member IDs, member IDs are OR combined
              items:
                type: string
            billable:
              type:
                - boolean
                - "null"
              description: Filter by billable status
            client_ids:
              type:
                - array
                - "null"
              description: Filter by client IDs, client IDs are OR combined
              items:
                type: string
            project_ids:
              type:
                - array
                - "null"
              description: Filter by project IDs, project IDs are OR combined
              items:
                type: string
            tag_ids:
              type:
                - array
                - "null"
              description: Filter by tag IDs, tag IDs are OR combined
              items:
                type: string
            task_ids:
              type:
                - array
                - "null"
              description: Filter by task IDs, task IDs are OR combined
              items:
                type: string
          required:
            - group
            - sub_group
            - history_group
            - start
            - end
            - active
            - member_ids
            - billable
            - client_ids
            - project_ids
            - tag_ids
            - task_ids
        created_at:
          type: string
          description: Date when the report was created
        updated_at:
          type: string
          description: Date when the report was last updated
      required:
        - id
        - name
        - description
        - is_public
        - public_until
        - shareable_link
        - properties
        - created_at
        - updated_at
      title: DetailedReportResource
    DetailedWithDataReportResource:
      type: object
      properties:
        name:
          type: string
          description: Name
        description:
          type:
            - string
            - "null"
          description: Description
        public_until:
          type:
            - string
            - "null"
          description: Date until the report is public
        currency:
          type: string
          description: Currency code (ISO 4217)
        number_format:
          description: Number format
          $ref: "#/components/schemas/NumberFormat"
        currency_format:
          description: Currency format
          $ref: "#/components/schemas/CurrencyFormat"
        currency_symbol:
          type: string
          description: Currency symbol
        date_format:
          description: Date format
          $ref: "#/components/schemas/DateFormat"
        interval_format:
          description: Interval format
          $ref: "#/components/schemas/IntervalFormat"
        time_format:
          description: Time format
          $ref: "#/components/schemas/TimeFormat"
        properties:
          type: object
          properties:
            group:
              type: string
              description: Type of first grouping
            sub_group:
              type: string
              description: Type of second grouping
            history_group:
              type: string
              description: Type of grouping of the historic aggregation (time chart)
            start:
              type: string
              description: Start date of the report
            end:
              type: string
              description: End date of the report
          required:
            - group
            - sub_group
            - history_group
            - start
            - end
        data:
          type: object
          description: Aggregated data
          properties:
            grouped_type:
              type:
                - string
                - "null"
            grouped_data:
              type:
                - array
                - "null"
              items:
                type: object
                properties:
                  key:
                    type:
                      - string
                      - "null"
                  description:
                    type:
                      - string
                      - "null"
                  color:
                    type:
                      - string
                      - "null"
                  seconds:
                    type: integer
                  cost:
                    type: integer
                  grouped_type:
                    type:
                      - string
                      - "null"
                  grouped_data:
                    type:
                      - array
                      - "null"
                    items:
                      type: object
                      properties:
                        key:
                          type:
                            - string
                            - "null"
                        description:
                          type:
                            - string
                            - "null"
                        color:
                          type:
                            - string
                            - "null"
                        seconds:
                          type: integer
                        cost:
                          type: integer
                        grouped_type:
                          type: "null"
                        grouped_data:
                          type: "null"
                      required:
                        - key
                        - description
                        - color
                        - seconds
                        - cost
                        - grouped_type
                        - grouped_data
                required:
                  - key
                  - description
                  - color
                  - seconds
                  - cost
                  - grouped_type
                  - grouped_data
            seconds:
              type: integer
            cost:
              type: integer
          required:
            - grouped_type
            - grouped_data
            - seconds
            - cost
        history_data:
          type: object
          description: Historic aggregated data
          properties:
            grouped_type:
              type:
                - string
                - "null"
            grouped_data:
              type:
                - array
                - "null"
              items:
                type: object
                properties:
                  key:
                    type:
                      - string
                      - "null"
                  description:
                    type:
                      - string
                      - "null"
                  seconds:
                    type: integer
                  cost:
                    type: integer
                  grouped_type:
                    type:
                      - string
                      - "null"
                  grouped_data:
                    type:
                      - array
                      - "null"
                    items:
                      type: object
                      properties:
                        key:
                          type:
                            - string
                            - "null"
                        description:
                          type:
                            - string
                            - "null"
                        seconds:
                          type: integer
                        cost:
                          type: integer
                        grouped_type:
                          type: "null"
                        grouped_data:
                          type: "null"
                      required:
                        - key
                        - description
                        - seconds
                        - cost
                        - grouped_type
                        - grouped_data
                required:
                  - key
                  - description
                  - seconds
                  - cost
                  - grouped_type
                  - grouped_data
            seconds:
              type: integer
            cost:
              type: integer
          required:
            - grouped_type
            - grouped_data
            - seconds
            - cost
      required:
        - name
        - description
        - public_until
        - currency
        - number_format
        - currency_format
        - currency_symbol
        - date_format
        - interval_format
        - time_format
        - properties
        - data
        - history_data
      title: DetailedWithDataReportResource
    ExportFormat:
      type: string
      enum:
        - csv
        - pdf
        - xlsx
        - ods
      title: ExportFormat
    ImportRequest:
      type: object
      properties:
        type:
          type: string
        data:
          type: string
      required:
        - type
        - data
      title: ImportRequest
    IntervalFormat:
      type: string
      enum:
        - decimal
        - hours-minutes
        - hours-minutes-colon-separated
        - hours-minutes-seconds-colon-separated
      title: IntervalFormat
    InvitationResource:
      type: object
      properties:
        id:
          type: string
          description: ID of the invitation
        email:
          type: string
          description: Email
        role:
          type: string
          description: Role
      required:
        - id
        - email
        - role
      title: InvitationResource
    InvitationStoreRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        role:
          type: string
          enum:
            - admin
            - manager
            - employee
      required:
        - email
        - role
      title: InvitationStoreRequest
    MemberMergeIntoRequest:
      type: object
      properties:
        member_id:
          type: string
          description: ID of the member to which the data should be transferred
            (destination)
      title: MemberMergeIntoRequest
    MemberResource:
      type: object
      properties:
        id:
          type: string
          description: ID of membership
        user_id:
          type: string
          description: ID of user
        name:
          type: string
          description: Name
        email:
          type: string
          description: Email
        role:
          type: string
          description: Role
        is_placeholder:
          type: boolean
          description: Placeholder user for imports, user might not really exist and does
            not know about this placeholder membership
        billable_rate:
          type:
            - integer
            - "null"
          description: Billable rate in cents per hour
      required:
        - id
        - user_id
        - name
        - email
        - role
        - is_placeholder
        - billable_rate
      title: MemberResource
    MemberUpdateRequest:
      type: object
      properties:
        role:
          $ref: "#/components/schemas/Role"
        billable_rate:
          type:
            - integer
            - "null"
          minimum: 0
          maximum: 2147483647
      title: MemberUpdateRequest
    NumberFormat:
      type: string
      enum:
        - point-comma
        - comma-point
        - space-comma
        - space-point
        - apostrophe-point
      title: NumberFormat
    OrganizationResource:
      type: object
      properties:
        id:
          type: string
          description: ID
        name:
          type: string
          description: Name
        is_personal:
          type: boolean
          description: Personal organizations automatically created after registration
        billable_rate:
          type:
            - integer
            - "null"
          description: Billable rate in cents per hour
        employees_can_see_billable_rates:
          type: boolean
          description: Can members of the organization with role "employee" see the
            billable rates
        currency:
          type: string
          description: Currency code (ISO 4217)
        currency_symbol:
          type: string
          description: Currency symbol
        number_format:
          description: Number format
          $ref: "#/components/schemas/NumberFormat"
        currency_format:
          description: Currency format
          $ref: "#/components/schemas/CurrencyFormat"
        date_format:
          description: Date format
          $ref: "#/components/schemas/DateFormat"
        interval_format:
          description: Interval format
          $ref: "#/components/schemas/IntervalFormat"
        time_format:
          description: Time format
          $ref: "#/components/schemas/TimeFormat"
      required:
        - id
        - name
        - is_personal
        - billable_rate
        - employees_can_see_billable_rates
        - currency
        - currency_symbol
        - number_format
        - currency_format
        - date_format
        - interval_format
        - time_format
      title: OrganizationResource
    OrganizationUpdateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        billable_rate:
          type:
            - integer
            - "null"
          minimum: 0
          maximum: 2147483647
        employees_can_see_billable_rates:
          type: boolean
        number_format:
          $ref: "#/components/schemas/NumberFormat"
        currency_format:
          $ref: "#/components/schemas/CurrencyFormat"
        date_format:
          $ref: "#/components/schemas/DateFormat"
        interval_format:
          $ref: "#/components/schemas/IntervalFormat"
        time_format:
          $ref: "#/components/schemas/TimeFormat"
      title: OrganizationUpdateRequest
    PersonalMembershipResource:
      type: object
      properties:
        id:
          type: string
          description: ID of membership
        organization:
          type: object
          properties:
            id:
              type: string
              description: ID of organization
            name:
              type: string
              description: Name of organization
            currency:
              type: string
              description: Currency code (ISO 4217) of organization
          required:
            - id
            - name
            - currency
        role:
          type: string
          description: Role
      required:
        - id
        - organization
        - role
      title: PersonalMembershipResource
    ProjectMemberResource:
      type: object
      properties:
        id:
          type: string
          description: ID of project member
        billable_rate:
          type:
            - integer
            - "null"
          description: Billable rate in cents per hour
        member_id:
          type: string
          description: ID of the organization member
        project_id:
          type: string
          description: ID of the project
      required:
        - id
        - billable_rate
        - member_id
        - project_id
      title: ProjectMemberResource
    ProjectMemberStoreRequest:
      type: object
      properties:
        member_id:
          type: string
        billable_rate:
          type:
            - integer
            - "null"
          minimum: 0
          maximum: 2147483647
      required:
        - member_id
      title: ProjectMemberStoreRequest
    ProjectMemberUpdateRequest:
      type: object
      properties:
        billable_rate:
          type:
            - integer
            - "null"
          minimum: 0
          maximum: 2147483647
      title: ProjectMemberUpdateRequest
    ProjectResource:
      type: object
      properties:
        id:
          type: string
          description: ID of project
        name:
          type: string
          description: Name of project
        color:
          type: string
          description: Color of project
        client_id:
          type:
            - string
            - "null"
          description: ID of client
        is_archived:
          type: boolean
          description: Whether the client is archived
        billable_rate:
          type:
            - integer
            - "null"
          description: Billable rate in cents per hour
        is_billable:
          type: boolean
          description: Project time entries billable default
        estimated_time:
          type:
            - integer
            - "null"
          description: Estimated time in seconds
        spent_time:
          type: integer
          description: Spent time on this project in seconds (sum of the duration of all
            associated time entries, excl. still running time entries)
        is_public:
          type: boolean
          description: Whether the project is public
      required:
        - id
        - name
        - color
        - client_id
        - is_archived
        - billable_rate
        - is_billable
        - estimated_time
        - spent_time
        - is_public
      title: ProjectResource
    ProjectStoreRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the project, the name needs to be unique per client and
            organization
          minLength: 1
          maxLength: 255
        color:
          type: string
          maxLength: 255
        is_billable:
          type: boolean
        billable_rate:
          type:
            - integer
            - "null"
          minimum: 0
          maximum: 2147483647
        client_id:
          type:
            - string
            - "null"
          description: ID of the client
        estimated_time:
          type:
            - integer
            - "null"
          description: Estimated time in seconds
          minimum: 0
          maximum: 2147483647
        is_public:
          type: boolean
          description: Whether the project is public
      required:
        - name
        - color
        - is_billable
      title: ProjectStoreRequest
    ProjectUpdateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        color:
          type: string
          maxLength: 255
        is_billable:
          type: boolean
        is_archived:
          type: boolean
        is_public:
          type: boolean
        client_id:
          type:
            - string
            - "null"
        billable_rate:
          type:
            - integer
            - "null"
          minimum: 0
          maximum: 2147483647
        estimated_time:
          type:
            - integer
            - "null"
          description: Estimated time in seconds
          minimum: 0
          maximum: 2147483647
      required:
        - name
        - color
        - is_billable
      title: ProjectUpdateRequest
    ReportResource:
      type: object
      properties:
        id:
          type: string
          description: ID of the report
        name:
          type: string
          description: Name
        description:
          type:
            - string
            - "null"
          description: Description
        is_public:
          type: boolean
          description: Whether the report can be accessed via an external link
        public_until:
          type:
            - string
            - "null"
          description: Date until the report is public
        shareable_link:
          type:
            - string
            - "null"
          description: Get link to access the report externally, not set if the report is
            private
        created_at:
          type: string
          description: Date when the report was created
        updated_at:
          type: string
          description: Date when the report was last updated
      required:
        - id
        - name
        - description
        - is_public
        - public_until
        - shareable_link
        - created_at
        - updated_at
      title: ReportResource
    ReportStoreRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type:
            - string
            - "null"
        is_public:
          type: boolean
        public_until:
          type:
            - string
            - "null"
          format: date
          description: 'After this date the report will be automatically set to private
            (is_public=false) (Format: "Y-m-d\TH:i:s\Z", UTC timezone, Example:
            "2000-02-22T14:58:59Z")'
        properties:
          type: object
          properties:
            start:
              type: string
              format: date
            end:
              type: string
              format: date
            active:
              type:
                - boolean
                - "null"
            member_ids:
              type:
                - array
                - "null"
              items:
                type: string
                format: uuid
            billable:
              type:
                - boolean
                - "null"
            client_ids:
              type:
                - array
                - "null"
              items:
                type: string
                format: uuid
            project_ids:
              type:
                - array
                - "null"
              description: Filter by project IDs, project IDs are OR combined
              items:
                type: string
                format: uuid
            tag_ids:
              type:
                - array
                - "null"
              description: Filter by tag IDs, tag IDs are OR combined
              items:
                type: string
                format: uuid
            task_ids:
              type:
                - array
                - "null"
              items:
                type: string
                format: uuid
            group:
              $ref: "#/components/schemas/TimeEntryAggregationType"
            sub_group:
              $ref: "#/components/schemas/TimeEntryAggregationType"
            history_group:
              $ref: "#/components/schemas/TimeEntryAggregationTypeInterval"
            week_start:
              $ref: "#/components/schemas/Weekday"
            timezone:
              type:
                - string
                - "null"
          required:
            - start
            - end
            - group
            - sub_group
            - history_group
      required:
        - name
        - is_public
        - properties
      title: ReportStoreRequest
    ReportUpdateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type:
            - string
            - "null"
        is_public:
          type: boolean
        public_until:
          type:
            - string
            - "null"
          format: date
      title: ReportUpdateRequest
    Role:
      type: string
      enum:
        - owner
        - admin
        - manager
        - employee
        - placeholder
      title: Role
    TagCollection:
      type: array
      items:
        $ref: "#/components/schemas/TagResource"
      title: TagCollection
    TagResource:
      type: object
      properties:
        id:
          type: string
          description: ID
        name:
          type: string
          description: Name
        created_at:
          type: string
          description: When the tag was created
        updated_at:
          type: string
          description: When the tag was last updated
      required:
        - id
        - name
        - created_at
        - updated_at
      title: TagResource
    TagStoreRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
      required:
        - name
      title: TagStoreRequest
    TagUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
      required:
        - name
      title: TagUpdateRequest
    TaskResource:
      type: object
      properties:
        id:
          type: string
          description: ID
        name:
          type: string
          description: Name
        is_done:
          type: boolean
          description: Whether the task is done
        project_id:
          type: string
          description: ID of the project
        estimated_time:
          type:
            - integer
            - "null"
          description: Estimated time in seconds
        spent_time:
          type: integer
          description: Spent time on this task in seconds (sum of the duration of all
            associated time entries, excl. still running time entries)
        created_at:
          type: string
          description: When the tag was created
        updated_at:
          type: string
          description: When the tag was last updated
      required:
        - id
        - name
        - is_done
        - project_id
        - estimated_time
        - spent_time
        - created_at
        - updated_at
      title: TaskResource
    TaskStoreRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        project_id:
          type: string
        estimated_time:
          type:
            - integer
            - "null"
          description: Estimated time in seconds
          minimum: 0
          maximum: 2147483647
      required:
        - name
        - project_id
      title: TaskStoreRequest
    TaskUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        is_done:
          type: boolean
        estimated_time:
          type:
            - integer
            - "null"
          description: Estimated time in seconds
          minimum: 0
          maximum: 2147483647
      required:
        - name
      title: TaskUpdateRequest
    TimeEntryAggregationType:
      type: string
      enum:
        - day
        - week
        - month
        - year
        - user
        - project
        - task
        - client
        - billable
        - description
      title: TimeEntryAggregationType
    TimeEntryAggregationTypeInterval:
      type: string
      enum:
        - day
        - week
        - month
        - year
      title: TimeEntryAggregationTypeInterval
    TimeEntryResource:
      type: object
      properties:
        id:
          type: string
          description: ID of time entry
        start:
          type: string
          description: "Start of time entry (ISO 8601 format, UTC timezone, example:
            2024-02-26T17:17:17Z)"
        end:
          type:
            - string
            - "null"
          description: "End of time entry (ISO 8601 format, UTC timezone, example:
            2024-02-26T17:17:17Z)"
        duration:
          type:
            - integer
            - "null"
          description: Duration of time entry in seconds
        description:
          type:
            - string
            - "null"
          description: Description of time entry
        task_id:
          type:
            - string
            - "null"
          description: ID of task
        project_id:
          type:
            - string
            - "null"
          description: ID of project
        organization_id:
          type: string
          description: ID of organization
        user_id:
          type: string
          description: ID of user
        tags:
          type: array
          description: List of tag IDs
          items:
            type: string
        billable:
          type: boolean
          description: Whether time entry is billable
      required:
        - id
        - start
        - end
        - duration
        - description
        - task_id
        - project_id
        - organization_id
        - user_id
        - tags
        - billable
      title: TimeEntryResource
    TimeEntryStoreRequest:
      type: object
      properties:
        member_id:
          type: string
          description: ID of the organization member that the time entry should belong to
        project_id:
          type:
            - string
            - "null"
        task_id:
          type:
            - string
            - "null"
          description: ID of the task that the time entry should belong to
        start:
          type: string
          format: date
          description: 'Start of time entry (Format: "Y-m-d\TH:i:s\Z", UTC timezone,
            Example: "2000-02-22T14:58:59Z")'
        end:
          type:
            - string
            - "null"
          format: date
          description: 'End of time entry (Format: "Y-m-d\TH:i:s\Z", UTC timezone,
            Example: "2000-02-22T14:58:59Z")'
        billable:
          type: boolean
          description: Whether time entry is billable
        description:
          type:
            - string
            - "null"
          description: Description of time entry
          maxLength: 500
        tags:
          type:
            - array
            - "null"
          description: List of tag IDs
          items:
            type: string
      required:
        - member_id
        - start
        - billable
      title: TimeEntryStoreRequest
    TimeEntryUpdateMultipleRequest:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
            format: uuid
        changes:
          type: object
          properties:
            member_id:
              type: string
              description: ID of the organization member that the time entry should belong to
            project_id:
              type:
                - string
                - "null"
              description: ID of the project that the time entry should belong to
            task_id:
              type:
                - string
                - "null"
              description: ID of the task that the time entry should belong to
            billable:
              type: boolean
              description: Whether time entry is billable
            description:
              type:
                - string
                - "null"
              description: Description of time entry
              maxLength: 500
            tags:
              type:
                - array
                - "null"
              description: List of tag IDs
              items:
                type: string
      required:
        - ids
        - changes
      title: TimeEntryUpdateMultipleRequest
    TimeEntryUpdateRequest:
      type: object
      properties:
        member_id:
          type: string
          description: ID of the organization member that the time entry should belong to
        project_id:
          type:
            - string
            - "null"
          description: ID of the project that the time entry should belong to
        task_id:
          type:
            - string
            - "null"
          description: ID of the task that the time entry should belong to
        start:
          type: string
          format: date
          description: 'Start of time entry (Format: "Y-m-d\TH:i:s\Z", UTC timezone,
            Example: "2000-02-22T14:58:59Z")'
        end:
          type:
            - string
            - "null"
          format: date
          description: 'End of time entry (Format: "Y-m-d\TH:i:s\Z", UTC timezone,
            Example: "2000-02-22T14:58:59Z")'
        billable:
          type: boolean
          description: Whether time entry is billable
        description:
          type:
            - string
            - "null"
          description: Description of time entry
          maxLength: 500
        tags:
          type:
            - array
            - "null"
          description: List of tag IDs
          items:
            type: string
      title: TimeEntryUpdateRequest
    TimeFormat:
      type: string
      enum:
        - 12-hours
        - 24-hours
      title: TimeFormat
    UserResource:
      type: object
      properties:
        id:
          type: string
          description: ID of user
        name:
          type: string
          description: Name of user
        email:
          type: string
          description: Email of user
        profile_photo_url:
          type: string
          description: Profile photo URL
        timezone:
          type: string
          description: Timezone (f.e. Europe/Berlin or America/New_York)
        week_start:
          description: Starting day of the week
          $ref: "#/components/schemas/Weekday"
      required:
        - id
        - name
        - email
        - profile_photo_url
        - timezone
        - week_start
      title: UserResource
    Weekday:
      type: string
      enum:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
      title: Weekday
  responses:
    AuthorizationException:
      description: Authorization error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error overview.
            required:
              - message
    ModelNotFoundException:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error overview.
            required:
              - message
    AuthenticationException:
      description: Unauthenticated
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error overview.
            required:
              - message
    ValidationException:
      description: Validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Errors overview.
              errors:
                type: object
                description: A detailed description of each field that failed validation.
                additionalProperties:
                  type: array
                  items:
                    type: string
            required:
              - message
              - errors
    OrganizationNeedsAtLeastOneOwner:
      description: API exception
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                description: Whether the response is an error.
              key:
                type: string
                description: Error key.
              message:
                type: string
                description: Error message.
            required:
              - error
              - key
              - message
    OnlyOwnerCanChangeOwnership:
      description: API exception
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                description: Whether the response is an error.
              key:
                type: string
                description: Error key.
              message:
                type: string
                description: Error message.
            required:
              - error
              - key
              - message
    ChangingRoleToPlaceholderIsNotAllowed:
      description: API exception
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                description: Whether the response is an error.
              key:
                type: string
                description: Error key.
              message:
                type: string
                description: Error message.
            required:
              - error
              - key
              - message
    ChangingRoleOfPlaceholderIsNotAllowed:
      description: API exception
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                description: Whether the response is an error.
              key:
                type: string
                description: Error key.
              message:
                type: string
                description: Error message.
            required:
              - error
              - key
              - message
    EntityStillInUseApiException:
      description: API exception
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                description: Whether the response is an error.
              key:
                type: string
                description: Error key.
              message:
                type: string
                description: Error message.
            required:
              - error
              - key
              - message
    CanNotRemoveOwnerFromOrganization:
      description: API exception
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                description: Whether the response is an error.
              key:
                type: string
                description: Error key.
              message:
                type: string
                description: Error message.
            required:
              - error
              - key
              - message
    UserNotPlaceholderApiException:
      description: API exception
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                description: Whether the response is an error.
              key:
                type: string
                description: Error key.
              message:
                type: string
                description: Error message.
            required:
              - error
              - key
              - message
    ThisPlaceholderCanNotBeInvitedUseTheMergeToolInsteadException:
      description: API exception
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                description: Whether the response is an error.
              key:
                type: string
                description: Error key.
              message:
                type: string
                description: Error message.
            required:
              - error
              - key
              - message
    UserIsAlreadyMemberOfOrganizationApiException:
      description: API exception
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                description: Whether the response is an error.
              key:
                type: string
                description: Error key.
              message:
                type: string
                description: Error message.
            required:
              - error
              - key
              - message
    OnlyPlaceholdersCanBeMergedIntoAnotherMember:
      description: API exception
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                description: Whether the response is an error.
              key:
                type: string
                description: Error key.
              message:
                type: string
                description: Error message.
            required:
              - error
              - key
              - message
    PersonalAccessClientIsNotConfiguredException:
      description: API exception
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                description: Whether the response is an error.
              key:
                type: string
                description: Error key.
              message:
                type: string
                description: Error message.
            required:
              - error
              - key
              - message
    InactiveUserCanNotBeUsedApiException:
      description: API exception
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                description: Whether the response is an error.
              key:
                type: string
                description: Error key.
              message:
                type: string
                description: Error message.
            required:
              - error
              - key
              - message
    UserIsAlreadyMemberOfProjectApiException:
      description: API exception
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                description: Whether the response is an error.
              key:
                type: string
                description: Error key.
              message:
                type: string
                description: Error message.
            required:
              - error
              - key
              - message
    FeatureIsNotAvailableInFreePlanApiException:
      description: API exception
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                description: Whether the response is an error.
              key:
                type: string
                description: Error key.
              message:
                type: string
                description: Error message.
            required:
              - error
              - key
              - message
    PdfRendererIsNotConfiguredException:
      description: API exception
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                description: Whether the response is an error.
              key:
                type: string
                description: Error key.
              message:
                type: string
                description: Error message.
            required:
              - error
              - key
              - message
    TimeEntryStillRunningApiException:
      description: API exception
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                description: Whether the response is an error.
              key:
                type: string
                description: Error key.
              message:
                type: string
                description: Error message.
            required:
              - error
              - key
              - message
    TimeEntryCanNotBeRestartedApiException:
      description: API exception
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                description: Whether the response is an error.
              key:
                type: string
                description: Error key.
              message:
                type: string
                description: Error message.
            required:
              - error
              - key
              - message
    ExportException:
      description: API exception
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                description: Whether the response is an error.
              key:
                type: string
                description: Error key.
              message:
                type: string
                description: Error message.
            required:
              - error
              - key
              - message
